/*
 * generated by Xtext 2.17.1
 */
grammar InternalScoping2;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.scoping2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.scoping2.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.scoping2.services.Scoping2GrammarAccess;

}

@parser::members {

 	private Scoping2GrammarAccess grammarAccess;

    public InternalScoping2Parser(TokenStream input, Scoping2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Book";
   	}

   	@Override
   	protected Scoping2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBook
entryRuleBook returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBookRule()); }
	iv_ruleBook=ruleBook
	{ $current=$iv_ruleBook.current; }
	EOF;

// Rule Book
ruleBook returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='book'
		{
			newLeafNode(otherlv_0, grammarAccess.getBookAccess().getBookKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBookAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBookRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.scoping2.Scoping2.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBookAccess().getImportsDImportParserRuleCall_2_0());
				}
				lv_imports_2_0=ruleDImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBookRule());
					}
					add(
						$current,
						"imports",
						lv_imports_2_0,
						"org.xtext.example.scoping2.Scoping2.DImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBookAccess().getChaptersChapterParserRuleCall_3_0());
				}
				lv_chapters_3_0=ruleChapter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBookRule());
					}
					add(
						$current,
						"chapters",
						lv_chapters_3_0,
						"org.xtext.example.scoping2.Scoping2.Chapter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDImport
entryRuleDImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDImportRule()); }
	iv_ruleDImport=ruleDImport
	{ $current=$iv_ruleDImport.current; }
	EOF;

// Rule DImport
ruleDImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getDImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.xtext.example.scoping2.Scoping2.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleChapter
entryRuleChapter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChapterRule()); }
	iv_ruleChapter=ruleChapter
	{ $current=$iv_ruleChapter.current; }
	EOF;

// Rule Chapter
ruleChapter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='chapter'
		{
			newLeafNode(otherlv_0, grammarAccess.getChapterAccess().getChapterKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getChapterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChapterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getChapterAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getChapterAccess().getParagraphsParagraphParserRuleCall_3_0_0());
					}
					lv_paragraphs_3_0=ruleParagraph
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChapterRule());
						}
						add(
							$current,
							"paragraphs",
							lv_paragraphs_3_0,
							"org.xtext.example.scoping2.Scoping2.Paragraph");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getChapterAccess().getReferencesReferenceParserRuleCall_3_1_0());
					}
					lv_references_4_0=ruleReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChapterRule());
						}
						add(
							$current,
							"references",
							lv_references_4_0,
							"org.xtext.example.scoping2.Scoping2.Reference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getChapterAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleParagraph
entryRuleParagraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParagraphRule()); }
	iv_ruleParagraph=ruleParagraph
	{ $current=$iv_ruleParagraph.current; }
	EOF;

// Rule Paragraph
ruleParagraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_text_0_0=RULE_STRING
			{
				newLeafNode(lv_text_0_0, grammarAccess.getParagraphAccess().getTextSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParagraphRule());
				}
				setWithLastConsumed(
					$current,
					"text",
					lv_text_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ref'
		{
			newLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getRefKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReferenceRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getReferenceAccess().getRefChapterCrossReference_1_0());
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
