/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.scoping2.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.scoping2.scoping2.Book;
import org.xtext.example.scoping2.scoping2.Chapter;
import org.xtext.example.scoping2.scoping2.DImport;
import org.xtext.example.scoping2.scoping2.Paragraph;
import org.xtext.example.scoping2.scoping2.Reference;
import org.xtext.example.scoping2.scoping2.Scoping2Package;
import org.xtext.example.scoping2.services.Scoping2GrammarAccess;

@SuppressWarnings("all")
public class Scoping2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Scoping2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Scoping2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Scoping2Package.BOOK:
				sequence_Book(context, (Book) semanticObject); 
				return; 
			case Scoping2Package.CHAPTER:
				sequence_Chapter(context, (Chapter) semanticObject); 
				return; 
			case Scoping2Package.DIMPORT:
				sequence_DImport(context, (DImport) semanticObject); 
				return; 
			case Scoping2Package.PARAGRAPH:
				sequence_Paragraph(context, (Paragraph) semanticObject); 
				return; 
			case Scoping2Package.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Book returns Book
	 *
	 * Constraint:
	 *     (name=QualifiedName imports+=DImport* chapters+=Chapter*)
	 */
	protected void sequence_Book(ISerializationContext context, Book semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chapter returns Chapter
	 *
	 * Constraint:
	 *     (name=ID (paragraphs+=Paragraph | references+=Reference)*)
	 */
	protected void sequence_Chapter(ISerializationContext context, Chapter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DImport returns DImport
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_DImport(ISerializationContext context, DImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Scoping2Package.Literals.DIMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Scoping2Package.Literals.DIMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Paragraph returns Paragraph
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Paragraph(ISerializationContext context, Paragraph semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Scoping2Package.Literals.PARAGRAPH__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Scoping2Package.Literals.PARAGRAPH__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParagraphAccess().getTextSTRINGTerminalRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     ref=[Chapter|ID]
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Scoping2Package.Literals.REFERENCE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Scoping2Package.Literals.REFERENCE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceAccess().getRefChapterIDTerminalRuleCall_1_0_1(), semanticObject.eGet(Scoping2Package.Literals.REFERENCE__REF, false));
		feeder.finish();
	}
	
	
}
