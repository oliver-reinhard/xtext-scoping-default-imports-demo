/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.scoping2.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.scoping2.ide.contentassist.antlr.internal.InternalScoping2Parser;
import org.xtext.example.scoping2.services.Scoping2GrammarAccess;

public class Scoping2Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Scoping2GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Scoping2GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getChapterAccess().getAlternatives_3(), "rule__Chapter__Alternatives_3");
			builder.put(grammarAccess.getBookAccess().getGroup(), "rule__Book__Group__0");
			builder.put(grammarAccess.getDImportAccess().getGroup(), "rule__DImport__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getChapterAccess().getGroup(), "rule__Chapter__Group__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
			builder.put(grammarAccess.getBookAccess().getNameAssignment_1(), "rule__Book__NameAssignment_1");
			builder.put(grammarAccess.getBookAccess().getImportsAssignment_2(), "rule__Book__ImportsAssignment_2");
			builder.put(grammarAccess.getBookAccess().getChaptersAssignment_3(), "rule__Book__ChaptersAssignment_3");
			builder.put(grammarAccess.getDImportAccess().getImportedNamespaceAssignment_1(), "rule__DImport__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getChapterAccess().getNameAssignment_1(), "rule__Chapter__NameAssignment_1");
			builder.put(grammarAccess.getChapterAccess().getParagraphsAssignment_3_0(), "rule__Chapter__ParagraphsAssignment_3_0");
			builder.put(grammarAccess.getChapterAccess().getReferencesAssignment_3_1(), "rule__Chapter__ReferencesAssignment_3_1");
			builder.put(grammarAccess.getParagraphAccess().getTextAssignment(), "rule__Paragraph__TextAssignment");
			builder.put(grammarAccess.getReferenceAccess().getRefAssignment_1(), "rule__Reference__RefAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Scoping2GrammarAccess grammarAccess;

	@Override
	protected InternalScoping2Parser createParser() {
		InternalScoping2Parser result = new InternalScoping2Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Scoping2GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Scoping2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
